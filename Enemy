using Godot;
using System;

// Basic enemy with patrol + chase + melee attack
public partial class Enemy : Area2D
{
    // Stats
    [Export] public int MaxHealth { get; set; } = 50;
    [Export] public int Damage { get; set; } = 10;
    [Export] public float Speed { get; set; } = 100f;     // pixels/sec

    // AI ranges
    [Export] public float ChaseRadius { get; set; } = 200f;
    [Export] public float AttackRange { get; set; } = 20f;

    // Patrol points must be Position2D children; assign their NodePaths here
    [Export] public NodePath[] PatrolPointsPaths { get; set; }

    private Vector2[] patrolPoints;
    private int currentPatrolIndex = 0;
    private int currentHealth;
    private Node2D player;
    private float attackCooldown = 1.5f;
    private float attackTimer = 0f;

    public override void _Ready()
    {
        currentHealth = MaxHealth;

        // Load patrol points
        patrolPoints = new Vector2[PatrolPointsPaths.Length];
        for (int i = 0; i < PatrolPointsPaths.Length; i++)
        {
            var point = GetNode<Position2D>(PatrolPointsPaths[i]);
            patrolPoints[i] = point.Position;
        }

        // Find the Player node in the running scene
        player = GetTree().GetRoot().GetNode<Node2D>("Main/Player");
    }

    public override void _PhysicsProcess(double delta)
    {
        if (currentHealth <= 0)
        {
            QueueFree();
            return;
        }

        var me = Position;
        var toPlayer = player.Position - me;
        bool inChase = toPlayer.Length() < ChaseRadius;

        Vector2 velocity = Vector2.Zero;

        if (inChase)
        {
            // If within attack range, stop and attack; otherwise move toward player
            if (toPlayer.Length() > AttackRange)
            {
                velocity = toPlayer.Normalized() * Speed;
            }
            else
            {
                Attack((float)delta);
            }
        }
        else
        {
            // Patrol mode: move toward current patrol point
            var target = patrolPoints[currentPatrolIndex];
            var toTarget = target - me;
            if (toTarget.Length() < 10f)
                currentPatrolIndex = (currentPatrolIndex + 1) % patrolPoints.Length;
            else
                velocity = toTarget.Normalized() * Speed;
        }

        Position += velocity * (float)delta;
    }

    private void Attack(float dt)
    {
        attackTimer -= dt;
        if (attackTimer <= 0f)
        {
            // Deal damage if still in range
            if ((player.Position - Position).Length() <= AttackRange
                && player is Player p)
            {
                p.stats.CurrentHealth -= Damage;
            }
            attackTimer = attackCooldown;
        }
    }

    // Call this if something else damages the enemy
    public void TakeDamage(int amt)
    {
        currentHealth -= amt;
    }
}
