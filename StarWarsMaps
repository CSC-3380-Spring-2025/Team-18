using System;
using System.Collections.Generic;
using System.Drawing;

class TileMapGenerator
{
    // Define known colors and their meanings (feel free to add more!)
    public static readonly Dictionary<Color, string> KnownColorTypes = new()
    {
//dis is looking at certain colors and marking them as different areas, this can be changed 
        { Color.FromArgb(0, 0, 0), "Wall/Boundary" },
        { Color.FromArgb(51, 51, 51), "DeepWater" },
        { Color.FromArgb(102, 102, 102), "ShallowWater" },
        { Color.FromArgb(153, 153, 153), "Islands/Rocks" },
        { Color.FromArgb(204, 204, 204), "WalkablePath" },
        { Color.FromArgb(255, 255, 255), "Sign" },
        { Color.FromArgb(160, 160, 160), "SafeZone" },
        { Color.FromArgb(80, 80, 80), "EnemySpawn" }
    };

    public static (string[,], Dictionary<Color, string>) GenerateLabeledTileMap(string imagePath, int cellWidth, int cellHeight)
    {
        Bitmap bitmap = new Bitmap(imagePath);
        int rows = bitmap.Height / cellHeight;
        int cols = bitmap.Width / cellWidth;

        string[,] tileLabels = new string[cols, rows];
        Dictionary<Color, string> colorToLabelMap = new();

        for (int y = 0; y < rows; y++)
        {
            for (int x = 0; x < cols; x++)
            {
                int pixelX = x * cellWidth + cellWidth / 2;
                int pixelY = y * cellHeight + cellHeight / 2;

                if (pixelX >= bitmap.Width || pixelY >= bitmap.Height) continue;

                Color color = bitmap.GetPixel(pixelX, pixelY);

                if (!colorToLabelMap.ContainsKey(color))
                {
                    if (KnownColorTypes.TryGetValue(color, out string label))
                        colorToLabelMap[color] = label;
                    else
                        colorToLabelMap[color] = $"Unknown_{color.R}_{color.G}_{color.B}";
                }

                tileLabels[x, y] = colorToLabelMap[color];
            }
        }

        return (tileLabels, colorToLabelMap);
    }

    public static void PrintTileLabels(string[,] labels)
    {
        for (int y = 0; y < labels.GetLength(1); y++)
        {
            for (int x = 0; x < labels.GetLength(0); x++)
            {
                Console.Write($"{labels[x, y].PadRight(15)} ");
            }
            Console.WriteLine();
        }
    }
}

class Program
{
    static void Main()
    {
        string imagePath = "your_map_image.png"; // put funny map path here
        int cellWidth = 50;
        int cellHeight = 50;

        var (tileLabels, colorToLabelMap) = TileMapGenerator.GenerateLabeledTileMap(imagePath, cellWidth, cellHeight);
        TileMapGenerator.PrintTileLabels(tileLabels);

        Console.WriteLine("\nColor Legend:");
        foreach (var pair in colorToLabelMap)
        {
            Console.WriteLine($"Color {pair.Key} => Label {pair.Value}");
        }
    }
}
